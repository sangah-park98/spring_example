<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- Student 클래스의 bean -->
	<bean id="student" class="com.tjoeun.springAOP_xml.Student">
		<property name="name" value="김유진"/>
		<property name="age" value="13"/>
		<property name="gradeNum" value="6"/>
		<property name="classNum" value="13"/>
	</bean>
	
	
	<bean id="worker" class="com.tjoeun.springAOP_xml.Worker">
		<property name="name" value="남수연"/>
		<property name="age" value="28"/>
		<property name="job" value="코딩천재"/>
	</bean>
	
	<!-- AopTest 클래스의 bean -->
	<bean id="aopTest" class="aopTest.AopTest"/>
	
	<!--  
		xml 파일로 AOP 설정 준비 사항
		1. pom.xml 파일에 aspectjweaver dependency를 추가한다.
		2. bean 설정 xml 파일에 aop namespace를 추가한다.
			=> <beans> 태그에 xmlns:aop="http://www.springframework.org/schema/aop" 가 추가된다.
		3. AOP 메소드가 작성된 클래스의 bean을 생성한다.
	-->
	<bean id="logAop" class="com.tjoeun.springAOP_xml.LogAop"/>
	
	<!-- <aop:config> 태그 내부에서 AOP 환경을 설정한다. -->
	<aop:config> <!-- AOP 환경 설정 시작 (전체) -->
	
		<!--  
			<aop:aspect> 태그로 공통 기능 메소드가 저장된 클래스의 bean과 연결한다.
			실행할 공통 기능 메소드가 정의된 클래스의 bean을 지정하고 pointcut을 설정한다.
			id 속성은 공통 기능 메소드가 정의된 bean을 식별한다. => 식별이 목적이므로 아무거나 적어도 된다.
			ref 속성은 공통 기능 메소드가 정의된 bean과 연결한다. => 
		-->
		
		<aop:aspect id="logger" ref="logAop"> <!-- AOP 설정 시작 => (공통 메소드가 작성된 클래스 단위) -->
			
			<!--  
				<aop:pointcut> 태그로 pointcut(공통 기능이 실행될 위치)을 설정한다.
				expression
					- within(): 클래스 단위로 pointcut을 지정한다. 
					- execution(): 메소드 단위로 pointcut을 지정한다. (더 세밀)
				id: pointcut을 지정한다. => 식별이 목적이므로 아무거나 적어도 된다.
					
				within(*): 프로젝트의 모든 패키지의 모든 클래스의 모든 메소드에(전체 다) 공통 기능을 적용한다.
				within(aopTest.*): aopTest 패키지의 모든 클래스의 모든 메소드에 공통 기능을 적용한다.
           		within(com.tjoeun.springAOP_xml.*): com.tjoeun.springAOP_xml 패키지의 모든 클래스의 모든 메소드에 AOP를 적용한다.
	            within(com.tjoeun.springAOP_xml.Student): com.tjoeun.springAOP_xml 패키지의 Student 클래스의 모든 메소드에 AOP를 적용한다.
	            within(com.tjoeun.springAOP_xml.Worker): com.tjoeun.springAOP_xml 패키지의 Worker 클래스의 모든 메소드에 AOP를 적용한다.
	            within(com.tjoeun.springAOP_xml.S*): com.tjoeun.springAOP_xml 패키지의 S로 시작하는 클래스의 모든 메소드에 AOP를 적용한다.
	               => d*: "d"로 시작하는, *d: "d"로 끝나는, *d*: "d"를 포함하는
               
	            execution()은 ()안에 "*"을 먼저 입력하고 1칸 띄운 후 pointcut을 지정한다.
	            execution(* *.*()): 프로젝트의 모든 패키지의 모든 클래스의 모든 메소드에(전체 다) 공통 기능을 적용한다.
	            execution(* aopTest.*.*()): aopTest 패키지의 모든 클래스의 모든 메소드에 AOP를 적용한다.
	            execution(* com.tjoeun.springAOP_xml.Student.*()): com.tjoeun.springAOP_xml 패키지의 
	               Student 클래스의 모든 메소드에 AOP를 적용한다.
	            execution(* com.tjoeun.springAOP_xml.W*.*()): com.tjoeun.springAOP_xml 패키지의
	               "W"로 시작하는 모든 클래스의 모든 메소드에 AOP를 적용한다.
	            execution(* com.tjoeun.springAOP_xml.S*.g*()): com.tjoeun.springAOP_xml 패키지의
	               "S"로 시작하는 모든 클래스의 g로 시작하는 메소드에 AOP를 적용한다.
				
				
			-->
			<aop:pointcut expression="within(*)" id="beforeMethod"/>
			<aop:pointcut expression="within(com.tjoeun.springAOP_xml.*)" id="afterReturningMethod"/>
			<aop:pointcut expression="within(com.tjoeun.springAOP_xml.Student)" id="afterThrowingMethod"/>
			<aop:pointcut expression="execution(* com.tjoeun.springAOP_xml.W*.*())" id="afterMethod"/>
			<aop:pointcut expression="execution(* com.tjoeun.springAOP_xml.S*.g*())" id="aroundMethod"/>
			
			<!--
	            설정된 pointcut에 따른 AOP 메소드를 실행한다.
	            
	            <aop:before>: 핵심 기능 실행 전
	            <aop:after-returning>: 핵심 기능이 정상적으로 종료된 후
	            <aop:after-throwing>: 핵심 기능 실행시 exception이 발생된 경우
	            <aop:after>: 핵심 기능 실행시 exception 발생 여부와 상관없이
	            <aop:around>: 핵심 기능 실행 전과 후
	            
	            method 속성에는 <aop:aspect> 태그에서 참조시킨 클래스의 공통 기능 메소드 이름을 지정한다 
	            	=> 뒤에 ()는 붙이지 않는다.
	            pointcut-ref 속성에는 공통 기능을 실행할 pointcut의 id 속성을 참조시킨다.
         -->
			<aop:before method="before" pointcut-ref="beforeMethod"/>
			<aop:after-returning method="afterReturning" pointcut-ref="afterReturningMethod"/>
			<aop:after-throwing method="afterThrowing" pointcut-ref="afterThrowingMethod"/>
			<aop:after method="after" pointcut-ref="afterMethod"/>
			<aop:around method="around" pointcut-ref="aroundMethod"/>
			
		</aop:aspect> <!-- AOP 설정 끝 => (공통 메소드가 작성된 클래스 단위) -->
		
	
	</aop:config> <!-- AOP 환경 설정 끝 -->
	
</beans>

























